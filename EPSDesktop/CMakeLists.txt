IF ( BUILD_EPS_DESKTOP )
    FILE ( GLOB EPS_DESKTOP_SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp resources/*.qml resources/*.js )

    SET ( EPS_DESKTOP_BIN_FILE "${EPS_DESKTOP_BIN_NAME}" )

    SET ( CMAKE_AUTOMOC ON )
    SET ( CMAKE_INCLUDE_CURRENT_DIR ON )

    FIND_PACKAGE( Qt5Core REQUIRED )

    QT5_ADD_RESOURCES ( EPS_DESKTOP_QRCS ${EPS_DESKTOP_QRC_FILE} )

    IF ( NOT WIN32 AND NOT MINGW )
        ADD_EXECUTABLE ( ${EPS_DESKTOP_BIN_FILE} ${QT_GUI_TYPE} ${EPS_DESKTOP_QRCS} ${EPS_DESKTOP_SOURCE_FILES} )    
    ELSE (  )
        SET ( CMAKE_RC_COMPILER_INIT windres )
        ENABLE_LANGUAGE( RC )
        SET ( CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")
        ADD_EXECUTABLE ( ${EPS_DESKTOP_BIN_FILE} ${QT_GUI_TYPE} ${EPS_DESKTOP_QRCS} ${EPS_DESKTOP_SOURCE_FILES} ${EPS_DESKTOP_RC_FILE} )
    ENDIF (  )

    QT5_USE_MODULES( ${EPS_DESKTOP_BIN_FILE} Multimedia Quick Widgets )

    FOREACH ( FLAG ${CXX11_FEATURE_LIST} )
        SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE}
            APPEND PROPERTY COMPILE_DEFINITIONS ${FLAG} )
    ENDFOREACH ( FLAG ${CXX11_FEATURE_LIST} )

    TARGET_LINK_LIBRARIES ( ${EPS_DESKTOP_BIN_FILE}
        ${MYLIB_BIN_NAME}
        ${Boost_LIBRARIES}
    )
    
    IF ( NOT CMAKE_BUILD_TYPE MATCHES "Release"
            AND NOT CMAKE_BUILD_TYPE MATCHES "GCCMinSizeRel"
            AND NOT CMAKE_BUILD_TYPE MATCHES "GCCMaxSpeedRel"
            AND NOT CMAKE_BUILD_TYPE MATCHES "GCCNativeMinSizeRel"
            AND NOT CMAKE_BUILD_TYPE MATCHES "GCCNativeMaxSpeedRel" )
        SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "DEBUG_BUILD" )
    ENDIF(  )

    IF ( DEFINED EPS_DESKTOP_DEFINES )
        SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "${EPS_DESKTOP_DEFINES}" )
    ENDIF (  )

    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_COMPILER=\"${PRODUCT_BUILD_COMPILER}\"" )
    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_HOST=\"${PRODUCT_BUILD_HOST}\"" )
    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_PROCESSOR=\"${PRODUCT_BUILD_PROCESSOR}\"" )
    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_BUILD_SYSTEM=\"${PRODUCT_BUILD_SYSTEM}\"" )
    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COPYRIGHT_HOLDER=\"${EPS_DESKTOP_COPYRIGHT_HOLDER}\"" )
    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_COPYRIGHT_YEAR=\"${EPS_DESKTOP_COPYRIGHT_YEAR}\"" )
    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_DEVELOPER=\"${EPS_DESKTOP_DEVELOPER}\"" )
    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_PRODUCT_NAME=\"${EPS_DESKTOP_PRODUCT_NAME}\"" )
    SET_PROPERTY ( TARGET ${EPS_DESKTOP_BIN_FILE} APPEND PROPERTY COMPILE_DEFINITIONS "PRODUCT_PRODUCT_VERSION=\"${EPS_DESKTOP_PRODUCT_VERSION}\"" )

    GET_PROPERTY( EPS_DESKTOP_EXECUTABLE TARGET ${EPS_DESKTOP_BIN_FILE} PROPERTY LOCATION )

    IF ( CXX_GCC AND GCC_STRIP_EXECUTABLE )
        ADD_CUSTOM_COMMAND ( TARGET ${EPS_DESKTOP_BIN_FILE}
            POST_BUILD
            COMMAND strip ${EPS_DESKTOP_EXECUTABLE}
            COMMAND strip -R.comment ${EPS_DESKTOP_EXECUTABLE}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        )
    ENDIF (  )

    IF ( WIN32 AND MINGW )
        GET_PROPERTY( MYLIB_LIBRARY_PATH TARGET ${MYLIB_BIN_NAME} PROPERTY LOCATION )

        ADD_CUSTOM_COMMAND ( TARGET ${EPS_DESKTOP_BIN_FILE}
            POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy
            "${MYLIB_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${BOOST_FILESYSTEM_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${BOOST_SYSTEM_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${BOOST_THREAD_LIBRARY_PATH}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${CPPDB_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${CPPDB_SQLITE3_DRIVER}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${CRYPTOPP_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${LIBB64_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${SQLITE3_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${ZEROMQ_LIBRARY}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_GCC_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_STDCPP_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_WINPTHREAD_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_ICU_DT_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_ICU_IN_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_ICU_UC_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E make_directory
            "${CMAKE_CURRENT_BINARY_DIR}/${QT5_PATFORMS_DIR_NAME}/"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_PLUGINS_PATH}/${QT5_QMINIMAL_LIB}" "${CMAKE_CURRENT_BINARY_DIR}/${QT5_PATFORMS_DIR_NAME}/"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_PLUGINS_PATH}/${QT5_QOFFSCREEN_LIB}" "${CMAKE_CURRENT_BINARY_DIR}/${QT5_PATFORMS_DIR_NAME}/"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_PLUGINS_PATH}/${QT5_QWINDOWS_LIB}" "${CMAKE_CURRENT_BINARY_DIR}/${QT5_PATFORMS_DIR_NAME}/"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_CORE_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_GUI_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_MULTIMEDIA_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_NETWORK_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_QML_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_QUICK_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_V8_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy
            "${QT5_LIBRARY_PATH}/${QT5_WIDGETS_LIB}" "${CMAKE_CURRENT_BINARY_DIR}"
        )
    ENDIF (  )
ENDIF (  )


